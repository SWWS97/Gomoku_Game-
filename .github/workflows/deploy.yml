name: Deploy to EC2 (Docker)

on:
  push:
    branches: [ main ]   # main 브랜치에 push 될 때 자동 실행
  workflow_dispatch: {}   # (옵션) 수동으로도 실행 가능

concurrency:
  group: deploy-main
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Check out (for metadata only)
        uses: actions/checkout@v4

      - name: SSH deploy to EC2
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: false
          script: |
            # ---- 패키지/도커 준비 ----
            sudo apt-get update -y
            command -v git    >/dev/null || sudo apt-get install -y git
            command -v docker >/dev/null || curl -fsSL https://get.docker.com | sudo sh
            if ! docker compose version >/dev/null 2>&1; then
              sudo apt-get install -y docker-compose-plugin
            fi

            # ---- 앱 디렉토리 준비 ----
            APP_DIR=/srv/gomoku
            REPO_URL=${{ secrets.REPO_URL }}

            sudo mkdir -p "$APP_DIR"
            sudo chown ubuntu:ubuntu "$APP_DIR"

            # ---- 코드 가져오기 ----
            if [ ! -d "$APP_DIR/.git" ]; then
              git clone "$REPO_URL" "$APP_DIR"
            else
              cd "$APP_DIR"
              git fetch origin
              git reset --hard origin/main
            fi

            cd "$APP_DIR"

            # ---- 환경변수 파일 생성 ----
            mkdir -p envs
            # 시크릿 안에 $ 같은 문자가 있어도 안전하게 쓰기 위해 heredoc 사용
            cat > envs/.env.prod <<'EOF'
            ${{ secrets.ENV_PROD }}
            EOF

            # ---- Docker Compose로 컨테이너 실행 ----
            sudo docker compose -f docker-compose.yml -f docker-compose.prod.yml up -d

            # ---- Django 마이그레이션 & 정적파일 수집 ----
            sudo docker compose -f docker-compose.yml -f docker-compose.prod.yml exec -T web python manage.py migrate --noinput
            sudo docker compose -f docker-compose.yml -f docker-compose.prod.yml exec -T web python manage.py collectstatic --noinput || true
            
            # ---- 안 쓰는 이미지 정리 ----
            sudo docker system prune -f