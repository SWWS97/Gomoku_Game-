"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path

from dotenv import load_dotenv

BASE_DIR = Path(__file__).resolve().parent.parent


def load_env():
    # 1) 명시 지정이 있으면 사용 (절대/상대 모두 지원)
    env_file = os.getenv("ENV_FILE")
    if env_file:
        p = Path(env_file)
        if not p.is_absolute():
            # BASE_DIR 기준, 그리고 상위까지 둘 다 시도
            cand = [(BASE_DIR / p).resolve(), (BASE_DIR.parent / p).resolve()]
        else:
            cand = [p]
        for c in cand:
            if c.exists():
                load_dotenv(c)
                return
        print(f"[WARN] .env not found for ENV_FILE={env_file} -> {cand}")

    # 2) DJANGO_ENV가 있으면 envs/.env.{name} 우선
    name = os.getenv("DJANGO_ENV", "").lower()
    if name:
        p = (BASE_DIR / "envs" / f".env.{name}").resolve()
        if p.exists():
            load_dotenv(p)
            return

    # 3) 기본 후보: envs/.env.dev → envs/.env.prod → BASE_DIR/.env
    for c in [
        BASE_DIR / "envs" / ".env.dev",
        BASE_DIR / "envs" / ".env.prod",
        BASE_DIR / ".env",
    ]:
        c = c.resolve()
        if c.exists():
            load_dotenv(c)
            return

    print("[WARN] No .env loaded")


load_env()

# ── 기본 설정들
SECRET_KEY = os.getenv("DJANGO_SECRET_KEY", "dev-not-safe")
DEBUG = bool(int(os.getenv("DJANGO_DEBUG", "1")))
ALLOWED_HOSTS = os.getenv("ALLOWED_HOSTS", "127.0.0.1,localhost").split(",")


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!

# SECURITY WARNING: don't run with debug turned on in production!


# Application definition

DJANGO_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

OWN_APP = [
    "app.games",
    "app.accounts",
]

THIRD_PARTY_APPS = [
    "channels",
]

INSTALLED_APPS = DJANGO_APPS + OWN_APP + THIRD_PARTY_APPS

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",  # ← Nginx 설정 없이 collectstatic 된 파일을 서빙 하려면 추가
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"

ASGI_APPLICATION = "config.asgi.application"

REDIS_URL = os.getenv("REDIS_URL")  # 예: redis://redis:6379/0
if REDIS_URL:
    CHANNEL_LAYERS = {
        "default": {
            "BACKEND": "channels_redis.core.RedisChannelLayer",
            "CONFIG": {"hosts": [REDIS_URL]},
        }
    }
else:
    # 개발 최소 구성(단일 프로세스용)
    CHANNEL_LAYERS = {"default": {"BACKEND": "channels.layers.InMemoryChannelLayer"}}

# 운영에서 필수
ALLOWED_HOSTS = os.getenv("ALLOWED_HOSTS", "127.0.0.1,localhost").split(",")

# DB: (도커 운영시 Postgres 권장)
if os.getenv("POSTGRES_DB"):
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": os.getenv("POSTGRES_DB"),
            "USER": os.getenv("POSTGRES_USER"),
            "PASSWORD": os.getenv("POSTGRES_PASSWORD"),
            "HOST": os.getenv("POSTGRES_HOST", "db"),
            "PORT": os.getenv("POSTGRES_PORT", "5432"),
        }
    }
# 없으면 기존 SQLite 유지
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }

# ── Channel Layer (Redis 있으면 사용, 없으면 InMemory)
# ex) redis://redis:6379/0
REDIS_URL = os.getenv("REDIS_URL")
if REDIS_URL:
    CHANNEL_LAYERS = {
        "default": {
            "BACKEND": "channels_redis.core.RedisChannelLayer",
            "CONFIG": {"hosts": [REDIS_URL]},
        }
    }
else:
    CHANNEL_LAYERS = {"default": {"BACKEND": "channels.layers.InMemoryChannelLayer"}}


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# (선택) 로그인 필요 라우트 대비
LOGIN_URL = "/accounts/login/"
LOGIN_REDIRECT_URL = "/games/new/"  # 로그인 후 오목 방 만들러 가도록(원하면 바꿔도 됨)
LOGOUT_REDIRECT_URL = "/accounts/login/"
